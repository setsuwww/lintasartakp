generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ShiftType {
  CUSTOM
  MORNING
  AFTERNOON
  NIGHT
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum TicketStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)

  tickets     Ticket[]
  schedules   Schedule[]
  attendances Attendance[]

  shift   Shift? @relation(fields: [shiftId], references: [id])
  shiftId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TicketStatus @default(PENDING)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  shift   Shift? @relation(fields: [shiftId], references: [id])
  shiftId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shift {
  id         Int       @id @default(autoincrement())
  type       ShiftType
  customType String?
  startTime  DateTime  @db.Time
  endTime    DateTime  @db.Time

  users       User[]
  schedules   Schedule[]
  attendances Attendance[]
}

model Attendance {
  id     Int              @id @default(autoincrement())
  date   DateTime
  status AttendanceStatus @default(PRESENT)
  reason String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  shift   Shift @relation(fields: [shiftId], references: [id])
  shiftId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}
